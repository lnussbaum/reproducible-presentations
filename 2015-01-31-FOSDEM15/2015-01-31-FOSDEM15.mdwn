% Stretching out for trustworthy reproducible builds
% Holger Levsen \<holger@debian.org\>
% 2015-01-31 FOSDEM15

What are reproducible builds?
-----------------------------

\begin{center}
\Large
“reproducible” builds
enable anyone to reproduce the exact same
binary packages from a given source
\end{center}

Oh wow, TMI
-----------

 * *Reproducible builds for Debian and beyond* is a quite complex topic.
 * We have 50min and 77 slides. I'll expect there'll be 10-15min for questions in the end :-)

What are reproducible builds?
-----------------------------

\begin{center}
\Large
“reproducible” builds
enable anyone to reproduce the exact same
binary packages from a given source
\end{center}

Who knows about reproducible talks already?

“I want to believe”
-------------------

 * FOSS ethos: Users should have the source code to their programs
	* For both individual freedom and software security
 * But: The only proof that binary packages correspond to the source code is that **someone said so**
	* Without build system info, verification is almost impossible (and sometimes even with it)
 * This is inadequate for fostering trust in our software's functionality and security

“But I'm the developer!”
------------------------

 * “I know what's in the binary because I compiled it myself!”
 * “I'm an upstanding, careful, and responsible individual!”
 * “Why should I have to worry about hypothetical risks about the contents of my binaries?”

“But the build daemons are maintained well”
-------------------------------------------

 * How you can be sure this is the case?

Unpleasant thoughts
-------------------

 * We think of software development as a fundamentally benign activity. “I'm not that interesting.”
 * But attackers target a project's users through its developers
	* See Dullien “Offensive work and addiction” (2014)
 * Known successful attacks against infrastructure used by Linux (2003), FreeBSD (2013)

Single points of failure
------------------------

 * Imagine the most secure computer in the world...

Single points of failure
------------------------

 * Can that computer still remain secure if:
	* It is networked?
	* It is mobile or is physically accessible by others?
	* It regularly has arbitrary USB devices connected?
	* It must run Windows (in a VM)?
	* It regularly runs unauthenticated HTML+JS?
	* Several nation-states want access to it?

Single points of failure
------------------------

 * What if:
	* Compromising that one computer gave access to:
		* Hundreds of millions of other computers?
		* Every bank account in the world?
		* Every Windows computer in the world?
		*Every Linux server in the world?
	* Compromising that computer was worth:
		* $100k USD? (Market price of remote 0day)
		* $100M USD? (Censorship budget of Iran/yr)
		* $4B USD? (Bitcoin market cap)

How small can a backdoor be?
----------------------------

OpenSSH 3.0.2 (CVE-2002-0083) – exploitable security bug (privilege escalation: user can get root)

~~~~diff
{
  Channel *c;
-     if (id < 0 || id > channels_alloc) {
+     if (id < 0 || id >= channels_alloc) {
  log("channel_lookup: %d: bad id", id);
  return
~~~~diff

Result of fixing the bug (asm)
------------------------------

~~~diff
~~~

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{cmpl $0x0,0x8(%ebp)      cmpl $0x0,0x8(%ebp)}
\NormalTok{js 16                    js 16}
\NormalTok{mov 0x4,%eax             mov 0x4,%eax}
\NormalTok{cmp %eax,0x8(%ebp)       cmp %eax,0x8(%ebp)}
\NormalTok{jle 30                   jl 30}
\NormalTok{mov 0x8(%ebp),%eax       mov 0x8(%ebp),%eax}
\NormalTok{mov %eax,0x4(%esp)       mov %eax,0x4(%esp)}
\NormalTok{movl $0x4c,(%esp)        movl $0x4c,(%esp)}
\NormalTok{call 25                  call 25}
\end{Highlighting}
\end{Shaded}

Result of fixing the bug (asm)
------------------------------

~~~diff
~~~

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{cmpl $0x0,0x8(%ebp)      cmpl $0x0,0x8(%ebp)}
\NormalTok{js 16                    js 16}
\NormalTok{mov 0x4,%eax             mov 0x4,%eax}
\NormalTok{cmp %eax,0x8(%ebp)       cmp %eax,0x8(%ebp)}
\StringTok{jle}\NormalTok{ 30                   }\OtherTok{jl}\NormalTok{ 30}
\NormalTok{mov 0x8(%ebp),%eax       mov 0x8(%ebp),%eax}
\NormalTok{mov %eax,0x4(%esp)       mov %eax,0x4(%esp)}
\NormalTok{movl $0x4c,(%esp)        movl $0x4c,(%esp)}
\NormalTok{call 25                  call 25}
\end{Highlighting}
\end{Shaded}

Resulting difference in the binary
----------------------------------

What's the difference between \texttt{\StringTok{if (a > b)}} and \texttt{\OtherTok{if (a >= b)}} in x86 assembly?

----------   ---------------------------------------   --------------------------------------
assembly:                   \texttt{\StringTok{JLE}}   \texttt{\OtherTok{JL}}
opcode:                    \texttt{0x7\StringTok{E}}   \texttt{0x7\OtherTok{C}}
binary:       \texttt{011111\StringTok{\textbf{1}}0}   \texttt{011111\OtherTok{\textbf{0}}0}
----------   ---------------------------------------   --------------------------------------

\begin{center}\Huge
A single bit!
\end{center}

Other corresponding opcode pairs also differ by just a single bit (JGE=0x7D, JG=0x7F)

Result of fixing the bug (hex)
------------------------------

\setupctable{maxwidth=\textwidth}

---------------------------------------------------------------------------
Vulnerable                            Fixed
------------------------------------- -------------------------------------
\texttt{\NormalTok{55 89 e5 83 ec}}\  \texttt{\NormalTok{55 89 e5 83 ec}}\
\texttt{\NormalTok{28 83 7d 08 00}}\  \texttt{\NormalTok{28 83 7d 08 00}}\
\texttt{\NormalTok{78 0a a1 04 00}}\  \texttt{\NormalTok{78 0a a1 04 00}}\
\texttt{\NormalTok{00 00 39 45 08}}\  \texttt{\NormalTok{00 00 39 45 08}}\
\texttt{\NormalTok{7e 1a 8b 45 08}}\  \texttt{\NormalTok{7c 1a 8b 45 08}}\
\texttt{\NormalTok{89 44 24 04 c7}}\  \texttt{\NormalTok{89 44 24 04 c7}}\
\texttt{\NormalTok{04 24 4c 00 00}}\  \texttt{\NormalTok{04 24 4c 00 00}}\
\texttt{\NormalTok{00 e8 fc ff ff}}\  \texttt{\NormalTok{00 e8 fc ff ff}}\
\texttt{\NormalTok{ff b8 00 00 00}}\  \texttt{\NormalTok{ff b8 00 00 00}}\
\texttt{\NormalTok{00 eb 35      }}\  \texttt{\NormalTok{00 eb 35      }}\
---------------------------------------------------------------------------

Overall file size: approx. 500 kB

Result of fixing the bug (hex)
------------------------------

\setupctable{maxwidth=\textwidth}

--------------------------------------------------------------------------------------------------------------------------------------------
Vulnerable                                                             Fixed
---------------------------------------------------------------------- ---------------------------------------------------------------------
\texttt{\NormalTok{55 89 e5 83 ec}}\                                   \texttt{\NormalTok{55 89 e5 83 ec}}\
\texttt{\NormalTok{28 83 7d 08 00}}\                                   \texttt{\NormalTok{28 83 7d 08 00}}\
\texttt{\NormalTok{78 0a a1 04 00}}\                                   \texttt{\NormalTok{78 0a a1 04 00}}\
\texttt{\NormalTok{00 00 39 45 08}}\                                   \texttt{\NormalTok{00 00 39 45 08}}\
\texttt{\NormalTok{7}\StringTok{\textbf{e}}\NormalTok{ 1a 8b 45 08}}\  \texttt{\NormalTok{7}\OtherTok{\textbf{c}}\NormalTok{ 1a 8b 45 08}}\
\texttt{\NormalTok{89 44 24 04 c7}}\                                   \texttt{\NormalTok{89 44 24 04 c7}}\
\texttt{\NormalTok{04 24 4c 00 00}}\                                   \texttt{\NormalTok{04 24 4c 00 00}}\
\texttt{\NormalTok{00 e8 fc ff ff}}\                                   \texttt{\NormalTok{00 e8 fc ff ff}}\
\texttt{\NormalTok{ff b8 00 00 00}}\                                   \texttt{\NormalTok{ff b8 00 00 00}}\
\texttt{\NormalTok{00 eb 35      }}\                                   \texttt{\NormalTok{00 eb 35      }}\
--------------------------------------------------------------------------------------------------------------------------------------------

Overall file size: approx. 500 kB

How did this start?
-------------------

 * Bitcoin were the first to release reproducible binaries.

Bitcoin's motivation
--------------------

 * Malicious modifications to Bitcoin binaries could result in irrevocable theft of large amounts of money
 * Individual developers could be blamed for such modifications
 * Users might not believe that a developer's machine was hacked
 * Reproducible builds protect developers


How did this start?
-------------------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/tor-blog}
\end{center}

Nothing new though
------------------

\texttt{\footnotesize%
From: Martin Uecker <muecker@gmx.de> \\
Cc: debian-devel@lists.debian.org \\
Date: Sun, 23 Sep {\large 2007} 23:32:59 +0200 \\
}

\textit{%
I think it would be really cool if the Debian policy required
that packages could be rebuild bit-identical from source.
At the moment, it is impossible to independly verify the
integricity of binary packages.
}

\begin{flushright}
\tiny
\url{https://lists.debian.org/debian-devel/2007/09/msg00746.html}
\end{flushright}

FOSDEM14 talk
-------------

 * After Bitcoin and TOR did this, Lunar went out to spread the idea in the Debian world again

BoF during DebConf13
--------------------

 * Planned at the last minute
 * 30 attendees
 * Kicked off  
   `wiki.debian.org/ReproducibleBuilds`

Wiki today
----------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/wiki}
\end{center}

Shell script gone wild
----------------------

* FIXME: add first 10 liner from lunar which got me started

reproducible.debian.net overall stats
-------------------------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_pkg_state}
\end{center}

Investigated packages (out of 4k failues in sid)
------------------------------------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_notes}
\end{center}

Identified issues
-----------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_issues}
\end{center}

Basically three types of issues:

 * timestamps
 * random ordering of arrays or files (or something else)
 * build IDs, document section IDs

List of issues (as of 2015-01-20)
--------------
\tiny

 * timestamp_in_java_bnd_manifest_issue
 * timestamps_from_cpp_macros_issue
 * timestamps_generated_by_docbook_to_man_issue
 * timestamps_in_beam_files_issue
 * timestamps_in_documentation_generated_by_doxygen_issue
 * timestamps_in_documentation_generated_by_groff_issue
 * timestamps_in_documentation_generated_by_htmldoc_issue
 * timestamps_in_documentation_generated_by_javadoc_issue
 * timestamps_in_documentation_generated_by_man2html_issue
 * timestamps_in_documentation_generated_by_yard_issue
 * timestamps_in_dvi_generated_by_latex_issue
 * timestamps_in_erlc_beam_issue
 * timestamps_in_gzip_headers_issue
 * timestamps_in_jar_issue
 * timestamps_in_maven_pom_files_issue
 * timestamps_in_pdf_generated_by_apache_fop_issue
 * timestamps_in_pdf_generated_by_latex_issue
 * timestamps_in_pe_binaries_issue
 * timestamps_in_php_registry_files_issue
 * timestamps_in_png_issue
 * timestamps_in_python_code_generated_by_cheetah_issue
 * timestamps_in_python_docutils_issue
 * timestamps_in_source_generated_by_pyqt4_ui_issue
 * timestamps_in_static_libraries_issue
 * timestamps_in_tarball_issue
 * timestamps_in_zip_issue

List of issues (continued)
--------------------------

\tiny

 * random_ids_in_docbook_xsl_issue
 * randomness_in_gcj_output_issue
 * randomness_in_html_generated_by_texi2html_issue
 * random_order_in_egg_info_top_level_txt_issue
 * random_order_in_files_generated_by_extutils_depends_issue
 * random_order_in_java_jar_manifest_mf_issue
 * random_order_in_naturaldocs_issue
 * random_order_in_python_environment_pickle_issue

List of issues (continued)
--------------------------

\tiny

 * fontforge_reset_modification_time_issue
 * gtk_doc_api_index_full_issue
 * pdf_created_by_ghostscript_issue
 * python_wheel_package_issue
 * serial_numbers_in_ogg_issue
 * shlibs_order_varies_issue
 * unsorted_filelist_python_support_private_issue
 * update_icons_order_varies_issue
 * use_epydoc_issue
 * user_in_java_jar_manifest_issue
 * users_and_groups_in_tarball_issue
 * xpi_pack_saves_extra_attributes_in_jar_issue

List of issues (continued)
--------------------------

\tiny

 * blacklisted_on_jenkins_issue
 * debbindiff_runs_forever_issue
 * not_using_dh_builddeb_issue
 * dh_fixmtimes_runs_before_dh_always_exclude_issue
 * dh_usrlocal_order_varies_issue

Example issue list
------------------

 * FIXME: add screenshot of https://reproducible.debian.net/index_issues.html

Example issue
-------------

 * FIXME: add screenshot of https://reproducible.debian.net/issues/timestamps_in_jar_issue.html or such

Example package
---------------

 * FIXME: add screenshot of https://reproducible.debian.net/rb-pkg/arduino.html

Example .buildinfo
------------------

 * FIXME: add screenshot of one

Example debbindiff output
-------------------------

 * FIXME: add screenshot of one


Bugs filed
----------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_bugs}
\end{center}


More goodies
------------

 * https://reproducible.debian.net/$package
 * integration in tracker.debian.org (the new PTS)
 * IRC notifications thanks to KGB
 * FIXME: index_dd-list.html

How?
----

 * Record the build environment
 * Reproduce the build environment
 * Eliminate unneeded variations

Record the build environment
----------------------------

Record which versions of the build dependencies (and their dependencies) are
installed.

Reproduce the build environment
-------------------------------

`snapshot.debian.org`

Build paths
-----------

Build path is embedded in debug symbols:

\tiny

    $ readelf -w /usr/lib/debug/usr/bin/pidgin | grep '/tmp/build' | head -n 4
    <11>     DW_AT_name        : /tmp/buildd/pidgin-2.10.6/./pidgin/pidginstock.c
    <15>     DW_AT_comp_dir    : /tmp/buildd/pidgin-2.10.6/build/pidgin
    <402d>   DW_AT_name        : /tmp/buildd/pidgin-2.10.6/./pidgin/gtkaccount.c
    <4031>   DW_AT_comp_dir    : /tmp/buildd/pidgin-2.10.6/build/pidgin

\%

We store it in .buildinfo files.

File order
----------

`readdir()` returns file in the order of the file system.

Locale
------

Behaviour can change depending on configured locale:

\tiny

    $ printf 'a\nà\nb\n' | LC_ALL=C.UTF-8 sort
    a
    b
    à

    $ printf 'a\nà\nb\n' | LC_ALL=fr_FR.UTF-8 sort
    a
    à
    b


The hard path
-------------

 * Configure the toolchain:  
   binutils `--enable-deterministic-archives`
 * Add missing options:  
   `javadoc --no-timestamps`
 * Patch build systems:  
   `gzip -n`

Experiment
----------

\begin{center}
\Huge 62\%
\end{center}

Waow.

Other distributions
-------------------

 * Fedora  
   <http://securityblog.redhat.com/2013/09/18/reproducible-builds-for-fedora/>
 * OpenSUSE build-compare  
   <https://build.opensuse.org/package/show/openSUSE:Factory/build-compare>
 * NixOS  
   <http://lists.science.uu.nl/pipermail/nix-dev/2013-June/011357.html>

Want to help?
-------------

Triage:

 * Let's classify all the issues!


Want to help?
-------------

Code:

 * Add “no timestamps” option to `jar`, `javadoc`, `epydoc`…
 * Write a script to rebuild a package from a .changes file
   and a recorded environment.

Want to help?
-------------


Want to help?
-------------

Stay in touch:

 * Subscribe to the `ReproducibleBuilds` wiki page.
 * Subscribe to the `reproducible-builds@l.a.d.o` mailing list.
 * Join #debian-reproducible on irc.oftc.net

Reproducible Fedora ? SLES ? BSD ?
----------------------------------

\begin{center}
Please find me and talk to me. I'd love to help kickstart that.
\end{center}

tl;dr;
------

Status:

 * we've proven it's feasible in Debian
 * ready to rock for real once Debian Jessie has been released
 * we'd like to see reproducible build verifications everywhere in the F/OSS world. We can do it!

Questions? Comments?
--------------------

\begin{center}
\Huge
?
\end{center}

\begin{center}
\vspace{3em}
\url{wiki.debian.org/ReproducibleBuilds}
\url{reproducible.debian.net}
\end{center}
