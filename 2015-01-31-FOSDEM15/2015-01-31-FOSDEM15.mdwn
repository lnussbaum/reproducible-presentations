\titlepage

What are reproducible builds?
-----------------------------

\begin{center}
\Large
“reproducible builds”\\
enable anyone to reproduce\\
the exact same binary packages\\
from a given source
\end{center}

“I want to believe”
-------------------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/what-proofs-1}
\end{center}

“I want to believe”
-------------------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/what-proofs-2}
\end{center}

“I want to believe”
-------------------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/what-proofs-3}
\end{center}

“I want to believe”
-------------------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/what-proofs-4}
\end{center}

Why?
----

Reproducible builds allow **independent verifications** that a binary matches
what the source intended to produce.

\begin{flushright}
… and other nice things.
\end{flushright}

But I'm the developer!
----------------------

\begin{flushleft}
“\textit{I know what's in the binary because I compiled it myself!}”
\end{flushleft}

\begin{center}
“\textit{I'm an upstanding, careful, and responsible individual!}”
\end{center}

\begin{flushright}
“\textit{Why should I have to worry about hypothetical risks about the contents of my binaries?”}
\end{flushright}

But the build machines are secure
---------------------------------

 * How can you be sure?

Unpleasant thoughts
-------------------

 * We think of software development as a fundamentally benign activity.
     - “*I'm not that interesting.*”
 * Users can be targeted through developers
 * Known successful attacks against infrastructure used by Linux (2003),
   FreeBSD (2013)

Strong motivations
------------------

 * Compromise one computer to get:
     - Hundreds of millions of other computers?
     - Every bank account in the world?
     - Every Windows computer in the world?
     - Every Linux server in the world?
 * Compromise one computer is worth:
     - $100k USD? (Market price of remote 0day)
     - $100M USD? (Censorship budget of Iran per year)
     - $4B USD? (Bitcoin market cap)

How small can a backdoor be?
----------------------------

OpenSSH 3.0.2 (CVE-2002-0083) – exploitable security bug (privilege escalation: user can get root)

~~~~diff
 {
   Channel *c;
-  if (id < 0 || id > channels_alloc) {
+  if (id < 0 || id >= channels_alloc) {
     log("channel_lookup: %d: bad id", id);
     return;
   }
~~~~diff

Result of fixing the bug (asm)
------------------------------

~~~diff
~~~

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{cmpl $0x0,0x8(%ebp)      cmpl $0x0,0x8(%ebp)}
\NormalTok{js 16                    js 16}
\NormalTok{mov 0x4,%eax             mov 0x4,%eax}
\NormalTok{cmp %eax,0x8(%ebp)       cmp %eax,0x8(%ebp)}
\NormalTok{jle 30                   jl 30}
\NormalTok{mov 0x8(%ebp),%eax       mov 0x8(%ebp),%eax}
\NormalTok{mov %eax,0x4(%esp)       mov %eax,0x4(%esp)}
\NormalTok{movl $0x4c,(%esp)        movl $0x4c,(%esp)}
\NormalTok{call 25                  call 25}
\end{Highlighting}
\end{Shaded}

Result of fixing the bug (asm)
------------------------------

~~~diff
~~~

\begin{Shaded}
\begin{Highlighting}[]
\NormalTok{cmpl $0x0,0x8(%ebp)      cmpl $0x0,0x8(%ebp)}
\NormalTok{js 16                    js 16}
\NormalTok{mov 0x4,%eax             mov 0x4,%eax}
\NormalTok{cmp %eax,0x8(%ebp)       cmp %eax,0x8(%ebp)}
\StringTok{jle}\NormalTok{ 30                   }\OtherTok{jl}\NormalTok{ 30}
\NormalTok{mov 0x8(%ebp),%eax       mov 0x8(%ebp),%eax}
\NormalTok{mov %eax,0x4(%esp)       mov %eax,0x4(%esp)}
\NormalTok{movl $0x4c,(%esp)        movl $0x4c,(%esp)}
\NormalTok{call 25                  call 25}
\end{Highlighting}
\end{Shaded}

Resulting difference in the binary
----------------------------------

What's the difference between \texttt{\StringTok{if (a > b)}}  
and \texttt{\OtherTok{if (a >= b)}} in x86 assembly?

----------   ---------------------------------------   --------------------------------------
assembly:                   \texttt{\StringTok{JLE}}   \texttt{\OtherTok{JL}}
opcode:                    \texttt{0x7\StringTok{E}}   \texttt{0x7\OtherTok{C}}
binary:       \texttt{011111\StringTok{\textbf{1}}0}   \texttt{011111\OtherTok{\textbf{0}}0}
----------   ---------------------------------------   --------------------------------------

\begin{center}\Large
A single bit!
\end{center}

Other corresponding opcode pairs also differ by just a single bit (JGE=0x7D, JG=0x7F)

Result of fixing the bug (hex)
------------------------------

\setupctable{maxwidth=\textwidth}

---------------------------------------------------------------------------
Vulnerable                            Fixed
------------------------------------- -------------------------------------
\texttt{\NormalTok{55 89 e5 83 ec}}\  \texttt{\NormalTok{55 89 e5 83 ec}}\
\texttt{\NormalTok{28 83 7d 08 00}}\  \texttt{\NormalTok{28 83 7d 08 00}}\
\texttt{\NormalTok{78 0a a1 04 00}}\  \texttt{\NormalTok{78 0a a1 04 00}}\
\texttt{\NormalTok{00 00 39 45 08}}\  \texttt{\NormalTok{00 00 39 45 08}}\
\texttt{\NormalTok{7e 1a 8b 45 08}}\  \texttt{\NormalTok{7c 1a 8b 45 08}}\
\texttt{\NormalTok{89 44 24 04 c7}}\  \texttt{\NormalTok{89 44 24 04 c7}}\
\texttt{\NormalTok{04 24 4c 00 00}}\  \texttt{\NormalTok{04 24 4c 00 00}}\
\texttt{\NormalTok{00 e8 fc ff ff}}\  \texttt{\NormalTok{00 e8 fc ff ff}}\
\texttt{\NormalTok{ff b8 00 00 00}}\  \texttt{\NormalTok{ff b8 00 00 00}}\
\texttt{\NormalTok{00 eb 35      }}\  \texttt{\NormalTok{00 eb 35      }}\
---------------------------------------------------------------------------

Overall file size: approx. 500 kB

Result of fixing the bug (hex)
------------------------------

\setupctable{maxwidth=\textwidth}

--------------------------------------------------------------------------------------------------------------------------------------------
Vulnerable                                                             Fixed
---------------------------------------------------------------------- ---------------------------------------------------------------------
\texttt{\NormalTok{55 89 e5 83 ec}}\                                   \texttt{\NormalTok{55 89 e5 83 ec}}\
\texttt{\NormalTok{28 83 7d 08 00}}\                                   \texttt{\NormalTok{28 83 7d 08 00}}\
\texttt{\NormalTok{78 0a a1 04 00}}\                                   \texttt{\NormalTok{78 0a a1 04 00}}\
\texttt{\NormalTok{00 00 39 45 08}}\                                   \texttt{\NormalTok{00 00 39 45 08}}\
\texttt{\NormalTok{7}\StringTok{\textbf{e}}\NormalTok{ 1a 8b 45 08}}\  \texttt{\NormalTok{7}\OtherTok{\textbf{c}}\NormalTok{ 1a 8b 45 08}}\
\texttt{\NormalTok{89 44 24 04 c7}}\                                   \texttt{\NormalTok{89 44 24 04 c7}}\
\texttt{\NormalTok{04 24 4c 00 00}}\                                   \texttt{\NormalTok{04 24 4c 00 00}}\
\texttt{\NormalTok{00 e8 fc ff ff}}\                                   \texttt{\NormalTok{00 e8 fc ff ff}}\
\texttt{\NormalTok{ff b8 00 00 00}}\                                   \texttt{\NormalTok{ff b8 00 00 00}}\
\texttt{\NormalTok{00 eb 35      }}\                                   \texttt{\NormalTok{00 eb 35      }}\
--------------------------------------------------------------------------------------------------------------------------------------------

Overall file size: approx. 500 kB

How did this start?
-------------------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/tor-blog}
\end{center}

Bitcoin's motivation
--------------------

 * Malicious modifications to binaries could result in irrevocable
   unwanted transfers of bitcoins
 * Individual developers could be blamed for such modifications
 * Users might not believe that a developer's machine was hacked
 * Reproducible builds protect developers

Nothing new though
------------------

\texttt{\footnotesize%
From: Martin Uecker <muecker@gmx.de> \\
Cc: debian-devel@lists.debian.org \\
Date: Sun, 23 Sep {\large 2007} 23:32:59 +0200 \\
}

\textit{%
I think it would be really cool if the Debian policy required
that packages could be rebuild bit-identical from source.
At the moment, it is impossible to independly verify the
integricity of binary packages.
}

\begin{flushright}
\footnotesize
\url{https://lists.debian.org/debian-devel/2007/09/msg00746.html}
\end{flushright}

Wouldn't it be cool?
--------------------

 * Debian is the largest collection of free software
 * More than 21,000 source packages
 * “Our priorities are our **users** and **free software**”

How?
----

 * Record the build environment
 * Reproduce the build environment
 * Eliminate unneeded variations

Record the build environment
----------------------------

New control file `*.buildinfo` which records:

 * Versions of build dependencies
     - … and their dependencies
 * Checksum of the source package.
 * Checksums of the binary packages.

Record the build environment
----------------------------

\footnotesize

~~~
Format: 1.9
Build-Architecture: amd64
Source: txtorcon
Binary: python-txtorcon
Architecture: all
Version: 0.11.0-1
Build-Path: /usr/src/debian/txtorcon-0.11.0-1
Checksums-Sha256:
 a26549d9…7b 125910 python-txtorcon_0.11.0-1_all.deb
 28f6bcbe…69 2039 txtorcon_0.11.0-1.dsc
Build-Environment:
 base-files (= 8),
 base-passwd (= 3.5.37),
 bash (= 4.3-11+b1),
 …
~~~

Reproduce the build environment
-------------------------------

`snapshot.debian.org` archives every state of the Debian archive.

 * 2015-01-29: 28 terabytes of data in almost 17 million files.

srebuild
--------

 * Thin wrapper around `sbuild`
 * Find the right archive snapshot
 * Install packages listed in the `*.buildinfo` file
 * Start the build

Status: work in progress

Investigating packages
----------------------

    $ diff -u \
        <(xxd b1/numconv_2.7-1.1_amd64.deb) \
        <(xxd b2/numconv_2.7-1.1_amd64.deb)

Investigating packages (cont.)
------------------------------

\includegraphics[width=0.9\textwidth]{images/diffs/diff_deb}

Investigating packages (cont.)
------------------------------

    $ ar p b1/numconv_2.7-1.1_amd64.deb \
          control.tar.gz > /tmp/a.tar.gz
    $ ar p b2/numconv_2.7-1.1_amd64.deb \
          control.tar.gz > /tmp/b.tar.gz
    $ diff -u \
          <(xxd /tmp/a.tar.gz) \
          <(xxd /tmp/b.tar.gz) | less

Investigating packages (cont.)
------------------------------

\includegraphics[width=0.9\textwidth]{images/diffs/diff_control_tar_gz}

Investigating packages (cont.)
------------------------------

    $ gunzip /tmp/a.tar.gz
    $ gunzip /tmp/b.tar.gz
    $ diff -u \
          <(xxd /tmp/a.tar) \
          <(xxd /tmp/b.tar) | less

Investigating packages (cont.)
------------------------------

\includegraphics[width=0.9\textwidth]{images/diffs/diff_control_tar}

Investigating packages (cont.)
------------------------------

    $ tar tf /tmp/a.tar
    ./
    ./control
    ./md5sums

Investigating packages (cont.)
------------------------------

    $ tar xOf /tmp/a.tar ./md5sums > /tmp/a
    $ tar xOf /tmp/b.tar ./md5sums > /tmp/b
    $ diff -u /tmp/a /tmp/b | less

Investigating packages (cont.)
------------------------------

\includegraphics[width=0.9\textwidth]{images/diffs/diff_md5sums}

Investigating packages (cont.)
------------------------------

\begin{center}\Huge
Tedious process
\end{center}

Investigating packages (cont.)
------------------------------

[debbindiff](https://packages.debian.org/sid/debbindiff) :

 * Two files → HTML
 * Recursively unpack archives
 * Seeks human readability:
       - uncompress PDF
       - disassemble binaries,
       - unpack Gettext files,
       - … *easy to extend to new file formats*
 * Falls back to binary comparison

reproducible.debian.net - in the beginning
------------------------------------------

https://wiki.debian.org/ReproducibleBuilds once showed this:

\footnotesize

~~~
If you have a pbuilder already setup, it's fairly easy to setup an environment with the custom toolchain:

	sudo cp /var/cache/pbuilder/base.tgz \
		/var/cache/pbuilder/base-reproducible.tgz
	sudo pbuilder --login --save-after-exec --basetgz \
		/var/cache/pbuilder/base-reproducible.tgz
	echo 'deb http://reproducible.alioth.debian.org/debian/ ./' \
		> /etc/apt/sources.list.d/reproducible.list
	apt-get update
	apt-get install dpkg dpkg-dev debhelper dh-python discount
	exit 0
~~~

reproducible.debian.net - in the beginning (cont.)
--------------------------------------------------

\footnotesize

~~~
Once that's done, rebuilding a package can be done through:

	apt-get source --download-only acl
	sudo DEB_BUILD_OPTIONS=nocheck pbuilder --build --basetgz \
		/var/cache/pbuilder/base-reproducible.tgz acl_*.dsc
	mkdir b1 b2
	dcmd cp /var/cache/pbuilder/result/acl_*.changes b1
	sudo dcmd rm /var/cache/pbuilder/result/acl_*.changes
	sudo DEB_BUILD_OPTIONS=nocheck pbuilder --build --basetgz \
		/var/cache/pbuilder/base-reproducible.tgz acl_*.dsc
	dcmd cp /var/cache/pbuilder/result/acl_*.changes b2
	sudo dcmd rm /var/cache/pbuilder/result/acl_*.changes

diffp is useful to check the result:

	../misc/diffp b1/*.changes b2/*.changes
~~~

reproducible.debian.net - today
-------------------------------

 * driven by jenkins.debian.net
	* announced 2014-09-26
 * 14 jobs defined in 263 LOC yaml
	* 3 build jobs, rescheduled every 2min
	* job for auto scheduling
	* jobs to recreate pbuilder base.tgz and debbindiff schroot
	* job to update notes and issues from git
	* JSON output
	* remaining jobs mostly to create HTML and graphs
 * 13 shell scripts with 2049 LOC
 * 4 python scripts with 948 LOC

reproducible.debian.net: more goodies
------------

 * `https://reproducible.debian.net/$PACKAGE`
 * Reproducibility status in `tracker.debian.org`
 * Package sets (essential, build-essential, popcon1337, installed by DSA, tails, grml, their build-depends)
 * List of unreproducible packages per maintainer
 * IRC notifications
 * On demand scheduling of packages

reproducible.debian.net: not reproducible
-----------------------------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/index_FTBR}
\end{center}

reproducible.debian.net: package
--------------------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/gdb_notes}
\end{center}

reproducible.debian.net: package
--------------------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/gdb_debbindiff}
\end{center}

reproducible.debian.net: package
--------------------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/gdb_rbuild}
\end{center}

Customized toolchain
-----------------------------

 * Test and refine changes to tools used by build systems
 * Currently 20 source packages
 * Examples : **`dpkg`**, **`debhelper`**, `cdbs`, `libxslt`, `r-base`, `gtk-doc`, `fontforge`,
   …
 * Most patches already submitted
 * `git://git.debian.org/reproducible/$pkg.git` in branch `pu/reproducible_builds`

reproducible.debian.net overall stats
-------------------------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_pkg_state}
\end{center}

For those in the back
---------------------

\begin{center}
\Huge 82\%

\normalsize More than 17,500 source packages!
\end{center}

Investigated packages
---------------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_notes}
\end{center}

Identified issues
-----------------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_issues}
\end{center}

Identified issues
-----------------

 * Timestamps (recording current time)
 * File order
 * (Pseudo-)randomness:
       - Temporary file paths
       - UUID
       - Protection against complexity attacks

Identified issues (cont.)
-------------------------

 * CPU and memory related:
       - Code optimizations for current CPU class
       - Recording of memory addresses
 * ~~Build-path~~
 * Others, eg. locale settings

Identified issues (cont.)
-------------------------

\begin{center}\Huge
Examples\Large

Timestamps by build systems
\end{center}

Timestamps in static libraries
------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_dot_a}

Timestamps in static libraries (cont.)
--------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_static_library}

Timestamps written by Maven
---------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_maven}

Timestamps written by PyQt4
---------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_pyqt4}

Timestamps written by Erlang compiler
-------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_beam}

Timestamps in PE binaries
-------------------------

Windows, UEFI, Mono…

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_pe}

Timestamps in Java jar
----------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_jar}

\begin{flushright}\small
They are Zip archives, really.
\end{flushright}

Timestamps in PHP registry
--------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_php_reg}

Timestamps by a template engine
-------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_random_py}

Identified issues (cont.)
-------------------------

\begin{center}\Huge
Examples\Large

Archives
\end{center}

Timestamps in gzip headers
--------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_gzip}

Timestamps in Zip archives
--------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_zip}

Timestamps in tarballs
----------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_tarball}

Users and groups in tarballs
----------------------------

\includegraphics[width=0.9\textwidth]{images/examples/user_and_group_in_tarball}

Identified issues (cont.)
-------------------------

\begin{center}\Huge
Examples\Large

Timestamps in documentation
\end{center}

Timestamps written by Doxygen
-----------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_doxygen}

Timestamps written by docbook-to-man
------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/docbook-to-man}

Timestamps written by Ghostscript
---------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_ghostscript}

Timestamps written by Ghostscript (cont.)
-----------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_ghostscript_cont}

Timestamps written by GNU groff
-------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_groff}

Timestamps written by Javadoc
-----------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_javadoc}

Timestamps written by man2html
------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_by_man2html}

Timestamps in TeX output (.dvi)
-------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_dvi}

Identified issues (cont.)
-------------------------

\begin{center}\Huge
Examples\Large

“Compiled at/on/by”
\end{center}

Build time recorded through C pre-processor macros
--------------------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/cpp_macros_1}

Build time recorded through C pre-processor macros (cont.)
----------------------------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/cpp_macros_2}

Build time recorded through Makefile
------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/build_date_in_makefile}

Hostname recorded through ./configure
-------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/hostname_in_configure}

Build time recorded through ./configure
---------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/date_in_configure}

m4 macros for autoconf (build time)
-----------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/date_in_m4}

m4 macros for autoconf (username)
---------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/whoami_in_m4}

m4 macros for autoconf (hostname)
--------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/hostname_in_m4}

Identified issues (cont.)
-------------------------

\begin{center}\Huge
Examples\Large

File ordering
\end{center}

File ordering in python-support files
-------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/fileorder_python-support}

Identified issues (cont.)
-------------------------

\begin{center}\Huge
Examples\Large

Randomness
\end{center}

Random Perl hash order
----------------------

See *Algorithmic complexity attacks* in
[perlsec(1)](http://perldoc.perl.org/perlsec.html#Algorithmic-Complexity-Attacks).

\includegraphics[width=0.9\textwidth]{images/examples/random_perl_hash_order}

Random serial numbers in Ogg streams
------------------------------------

\includegraphics[width=0.9\textwidth]{images/examples/random_serials_in_ogg}

Identified issues (cont.)
-------------------------

\begin{center}\Huge
Examples\Large

Even more timestamps!
\end{center}

Timestamps in PNG
-----------------

Even images!

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_png}

Timestamps in TrueType font files
---------------------------------

And fonts!

\includegraphics[width=0.9\textwidth]{images/examples/timestamps_in_ttf}

----------------------------------

\begin{center}\Huge
Please help!
\end{center}

Please help!
------------

 * Do not record time, username, hostname, kernel version…
     - … or make it optional.
 * Sort file paths.
 * Sort dictionary keys.
 * Merge our patches!

Bugs filed
----------

\begin{center}
\includegraphics[width=0.9\textwidth]{images/stats_bugs}
\end{center}

Help Debian?
------------

\begin{center}
\includegraphics[width=0.8\textwidth]{images/wiki}
\end{center}

Help Debian?
------------

 * Inventory issues
 * Make packages build reproducibly
 * Fix known common issues:
     - get reproducible PE binaries;
     - random filenames with GCC;
     - …
 * Hack Debian archive infrastructure
     - store and distribute `*.buildinfo` files
     - …
 * Hack tool to display local packages reproducibility status

Contributors
------------

\setupctable{maxwidth=\textwidth,doinside=\small}

------------------- ---------------------- ------------------
akira               Hans-Christoph Steiner Peter De Wachter
Andrew Ayer         Helmut Grohne          Reiner Herrmann
Asheesh Laroia      Holger Levsen          Stefano Rivera
Chris Lamb          josch                  Stéphane Glondu
Chris West          Lunar                  Steven Chamberlain
Daniel Kahn Gillmor Mattia Rizzolo         Tom Fitzhenry
David Suarez        Niels Thykier          Tomasz Buchert
Drew Fisher         Niko Tyni              Wookey
Guillem Jover       Paul Wise              Ximin Luo
------------------- ---------------------- ------------------

Stay in touch
------------

 * Subscribe to the `ReproducibleBuilds` wiki pages.
 * Mailing lists:
     - `reproducible-builds@lists.alioth.debian.org`
     - `reproducible-commits@lists.alioth.debian.org`
 * Join `#debian-reproducible` on `irc.oftc.net`

Other distributions
-------------------

 * Fedora  
   <http://securityblog.redhat.com/2013/09/18/reproducible-builds-for-fedora/>
 * OpenSUSE build-compare  
   <https://build.opensuse.org/package/show/openSUSE:Factory/build-compare>
 * NixOS  
   <http://lists.science.uu.nl/pipermail/nix-dev/2013-June/011357.html>

Reproducible Fedora?
--------------------

 * No known activity after the initial blog post.
 * Fedora is leading developments for key components.
 * Can we help **reproducible Fedora**?

\begin{center}
\includegraphics[width=0.6\textwidth]{images/fedoralogo}
\end{center}

Reproducible BSD ?!! SLES ?!! Hurd ?!?
-------------------------------------

 * We'd love to help kickstart **reproducible everything** !
 * Please find us and talk to us.

Future
------

 * Ready for the next Debian release (*stretch*)
 * Reproducible installation media
 * Reproducible live images (pure Debian, grml, Tails)
 * Reproducible build verifications everywhere in the F/OSS world. We can do it!
	* binary transparency logs: public log of all software releases

Thanks
------

 * Mike Perry and Seth Schoen for their 31C3 talk
 * Profitbricks for sponsoring `jenkins.debian.net`
 * Globalsign for sponsoring X.509 certificates
 * Designers of Tango icons
 * Everyone who helped!

\begin{center}
\includegraphics[width=0.3\textwidth]{images/profitbricks-cloud-computing-logo-rgb}
\hspace{3em}
\includegraphics[width=0.3\textwidth]{images/globalsign-logo}
\end{center}

Questions? Comments?
--------------------

\begin{center}
\fontsize{5cm}{1em}\selectfont
?
\end{center}

\begin{center}
\url{https://wiki.debian.org/ReproducibleBuilds}
\url{https://reproducible.debian.net/}
\end{center}

\setupctable{maxwidth=\textwidth,doinside=\footnotesize}

------- -----------------------------------------------------------
 Holger \texttt{B8BF 5413 7B09 D35C F026  FE9D 091A B856 069A AA1C}
 Lunar  \texttt{0603 CCFD 9186 5C17 E88D  4C79 8382 C95C 2902 3DF9}
------- -----------------------------------------------------------
